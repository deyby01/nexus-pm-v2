# Generated by Django 4.2.8 on 2025-10-22 17:02

import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this user",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Primary email address used for authentication",
                        max_length=254,
                        unique=True,
                    ),
                ),
                (
                    "first_name",
                    models.CharField(help_text="User's first name", max_length=50),
                ),
                (
                    "last_name",
                    models.CharField(help_text="User's last name", max_length=50),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        help_text="User's profile picture",
                        null=True,
                        upload_to="avatars/%Y/%m/",
                    ),
                ),
                (
                    "timezone",
                    models.CharField(
                        default="UTC",
                        help_text="User's preferred timezone for dates and times",
                        max_length=50,
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("en", "English"),
                            ("es", "Español"),
                            ("fr", "Français"),
                            ("de", "Deutsch"),
                            ("pt", "Português"),
                        ],
                        default="en",
                        help_text="User's preferred language for the interface",
                        max_length=10,
                    ),
                ),
                (
                    "date_format",
                    models.CharField(
                        choices=[
                            ("YYYY-MM-DD", "2025-10-22"),
                            ("MM/DD/YYYY", "10/22/2025"),
                            ("DD/MM/YYYY", "22/10/2025"),
                            ("DD-MM-YYYY", "22-10-2025"),
                        ],
                        default="YYYY-MM-DD",
                        help_text="User's preferred date format",
                        max_length=20,
                    ),
                ),
                (
                    "job_title",
                    models.CharField(
                        blank=True, help_text="User's job title or role", max_length=100
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        help_text="User's contact phone number",
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be in format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "is_email_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the user's email address has been verified",
                    ),
                ),
                (
                    "email_verified_at",
                    models.DateTimeField(
                        blank=True, help_text="When the email was verified", null=True
                    ),
                ),
                (
                    "last_login_ip",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address of the user's last login",
                        null=True,
                    ),
                ),
                (
                    "failed_login_attempts",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="Number of consecutive failed login attempts",
                    ),
                ),
                (
                    "locked_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="Account locked until this datetime due to failed logins",
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this user account was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this user account was last updated",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this user account was soft deleted",
                        null=True,
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        help_text="Internal username (auto-generated from email)",
                        max_length=150,
                        unique=True,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "users_user",
                "indexes": [
                    models.Index(fields=["email"], name="users_user_email_6f2530_idx"),
                    models.Index(
                        fields=["created_at"], name="users_user_created_cf865c_idx"
                    ),
                    models.Index(
                        fields=["last_login"], name="users_user_last_lo_5f84ec_idx"
                    ),
                    models.Index(
                        fields=["is_active", "deleted_at"],
                        name="users_user_is_acti_d0475d_idx",
                    ),
                ],
            },
        ),
    ]
