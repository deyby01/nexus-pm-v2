# Generated by Django 4.2.8 on 2025-10-23 01:54

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("workspaces", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this project",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Project name (e.g., 'Mobile App V3', 'Q4 Marketing Campaign')",
                        max_length=200,
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly identifier within the workspace",
                        max_length=200,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of project objectives and scope",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planning", "Planning"),
                            ("active", "Active"),
                            ("on_hold", "On Hold"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("archived", "Archived"),
                        ],
                        default="planning",
                        help_text="Current status of the project",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        help_text="Project priority level for resource allocation",
                        max_length=10,
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        blank=True,
                        help_text="Planned or actual project start date",
                        null=True,
                    ),
                ),
                (
                    "due_date",
                    models.DateField(
                        blank=True,
                        help_text="Target completion date for the project",
                        null=True,
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the project was marked as completed",
                        null=True,
                    ),
                ),
                (
                    "estimated_hours",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Estimated total hours for project completion",
                        null=True,
                    ),
                ),
                (
                    "budget",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Project budget in USD",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "progress_percentage",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="Project completion percentage (0-100)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        default=list,
                        help_text="Project tags for categorization and filtering",
                    ),
                ),
                (
                    "settings",
                    models.JSONField(
                        default=dict,
                        help_text="Project-specific settings and preferences",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this project",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_projects",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project_manager",
                    models.ForeignKey(
                        blank=True,
                        help_text="User responsible for managing this project",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managed_projects",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Project",
                "verbose_name_plural": "Projects",
                "db_table": "projects_project",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this task",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Brief, descriptive task title", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of the work to be done",
                    ),
                ),
                (
                    "acceptance_criteria",
                    models.TextField(
                        blank=True,
                        help_text="Specific criteria that define when this task is complete",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("todo", "To Do"),
                            ("in_progress", "In Progress"),
                            ("in_review", "In Review"),
                            ("blocked", "Blocked"),
                            ("completed", "Completed"),
                            ("verified", "Verified"),
                        ],
                        default="todo",
                        help_text="Current status of the task",
                        max_length=15,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        help_text="Task priority level",
                        max_length=10,
                    ),
                ),
                (
                    "due_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this task should be completed",
                        null=True,
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When work on this task actually began",
                        null=True,
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this task was marked as completed",
                        null=True,
                    ),
                ),
                (
                    "estimated_hours",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Estimated hours required to complete this task",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "actual_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Actual hours spent on this task",
                        max_digits=6,
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        default=list,
                        help_text="Task tags for categorization and filtering",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "assignee",
                    models.ForeignKey(
                        blank=True,
                        help_text="User assigned to complete this task",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this task",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Task",
                "verbose_name_plural": "Tasks",
                "db_table": "projects_task",
                "ordering": ["-priority", "due_date", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="TaskDependency",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "dependency_type",
                    models.CharField(
                        choices=[
                            ("blocks", "Blocks"),
                            ("subtask", "Subtask"),
                            ("related", "Related"),
                        ],
                        default="blocks",
                        help_text="Type of dependency relationship",
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this dependency",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "from_task",
                    models.ForeignKey(
                        help_text="Task that creates the dependency",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="outgoing_dependencies",
                        to="projects.task",
                    ),
                ),
                (
                    "to_task",
                    models.ForeignKey(
                        help_text="Task that depends on the from_task",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="incoming_dependencies",
                        to="projects.task",
                    ),
                ),
            ],
            options={
                "verbose_name": "Task Dependency",
                "verbose_name_plural": "Task Dependencies",
                "db_table": "projects_task_dependency",
                "unique_together": {("from_task", "to_task", "dependency_type")},
            },
        ),
        migrations.AddField(
            model_name="task",
            name="depends_on",
            field=models.ManyToManyField(
                help_text="Tasks that must be completed before this task can start",
                related_name="dependent_tasks",
                through="projects.TaskDependency",
                to="projects.task",
            ),
        ),
        migrations.AddField(
            model_name="task",
            name="project",
            field=models.ForeignKey(
                help_text="Project this task belongs to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tasks",
                to="projects.project",
            ),
        ),
        migrations.CreateModel(
            name="ProjectMembership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("lead", "Project Lead"),
                            ("member", "Team Member"),
                            ("reviewer", "Reviewer"),
                            ("observer", "Observer"),
                        ],
                        default="member",
                        help_text="User's role in this specific project",
                        max_length=20,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this project assignment is active",
                    ),
                ),
                ("assigned_at", models.DateTimeField(auto_now_add=True)),
                (
                    "assigned_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Who assigned this user to the project",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="project_assignments_made",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        help_text="Project the user is assigned to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        to="projects.project",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User assigned to this project",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="project_memberships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Project Membership",
                "verbose_name_plural": "Project Memberships",
                "db_table": "projects_membership",
            },
        ),
        migrations.AddField(
            model_name="project",
            name="team_members",
            field=models.ManyToManyField(
                help_text="Users assigned to work on this project",
                related_name="projects",
                through="projects.ProjectMembership",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="project",
            name="workspace",
            field=models.ForeignKey(
                help_text="Workspace this project belongs to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="projects",
                to="workspaces.workspace",
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["project", "status"], name="projects_ta_project_cd2085_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["assignee", "status"], name="projects_ta_assigne_df8978_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["due_date", "status"], name="projects_ta_due_dat_d97d19_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["priority", "status"], name="projects_ta_priorit_b272ad_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["created_at"], name="projects_ta_created_b3975c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="projectmembership",
            index=models.Index(
                fields=["project", "role"], name="projects_me_project_5b7a94_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="projectmembership",
            index=models.Index(
                fields=["user", "is_active"], name="projects_me_user_id_e8fee6_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="projectmembership",
            unique_together={("user", "project")},
        ),
        migrations.AddIndex(
            model_name="project",
            index=models.Index(
                fields=["workspace", "status"], name="projects_pr_workspa_944c68_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="project",
            index=models.Index(
                fields=["project_manager"], name="projects_pr_project_bf9b53_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="project",
            index=models.Index(
                fields=["due_date", "status"], name="projects_pr_due_dat_2c4476_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="project",
            index=models.Index(
                fields=["priority", "status"], name="projects_pr_priorit_17637b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="project",
            index=models.Index(
                fields=["created_at"], name="projects_pr_created_6b02e3_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="project",
            unique_together={("workspace", "slug")},
        ),
    ]
